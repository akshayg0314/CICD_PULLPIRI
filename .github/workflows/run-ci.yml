name: Rust CI Core

# Triggered when called from another workflow or manually via the GitHub UI
on:
  workflow_call:
  workflow_dispatch:

jobs:
  rust_ci:
    # Run this job on Ubuntu with the official Rust container
    runs-on: ubuntu-latest
    container:
      image: rust:latest  # Ensures a Rust environment is preinstalled

    steps:
      # Checkout the repository
      - uses: actions/checkout@v4
      - name: Clone IDL2DDS repository
        run: |
          git clone https://github.com/MCO-PICCOLO/IDL2DDS -b master

      - name: Install Docker and Compose
        run: |
            echo "🐳 Installing Docker CLI and Docker Compose..."
            sudo apt-get update -y
            sudo apt-get install -y \
            ca-certificates \
            curl \
            gnupg \
            lsb-release

            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

            UBUNTU_CODENAME=$(lsb_release -cs)
            echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
            https://download.docker.com/linux/ubuntu $UBUNTU_CODENAME stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

            sudo apt-get update
            sudo apt-get install -y \
            docker-ce \
            docker-ce-cli \
            containerd.io \
            docker-buildx-plugin \
            docker-compose-plugin

            docker --version
            docker compose version

      - name: Run IDL2DDS using docker compose
        working-directory: ./IDL2DDS
        run: |
          docker compose up -d --build

      - name: Check if IDL2DDS container is healthy
        run: |
          docker ps -a
          docker logs idl2dds || true

      - name: Wait for IDL2DDS container readiness
        run: |
          for i in {1..5}; do
            if curl -sf http://localhost:12345/health; then
              echo "✅ IDL2DDS is ready!"
              break
            else
              echo "⌛ Waiting for IDL2DDS container... ($i)"
              sleep 2
            fi
          done
      # Install required system-level dependencies from your custom script
      - name: Install dependencies
        run: ./scripts/installdeps.sh

      # Prepare necessary folders for all output artifacts
      - name: Create reports directory
        run: |
          mkdir -p dist/reports/fmt
          mkdir -p dist/reports/deny
          mkdir -p dist/tests
          mkdir -p dist/licenses

      # Build the project and parse any outputs (likely from logs)
      - name: Run build and parse
        run: ./scripts/buildNparse.sh

      # Run all unit/integration tests and convert results to test reports
      - name: Run tests and generate report
        run: ./scripts/testNparse.sh

      # Run Clippy (Rust linter) to catch code issues
      - name: Run lint and generate report
        run: ./scripts/clippy_check.sh

      # Check formatting with `cargo fmt` and write a summary report
      - name: Run format check and generate report
        run: ./scripts/fmt_check.sh

      # Run `cargo-deny` to check license, bans, vulnerabilities etc.
      - name: Run cargo-deny checks and generate report
        run: ./scripts/deny_check.sh

      # Upload deny report even if prior steps failed
      - name: Upload deny report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deny-report
          path: dist/reports/deny/deny_summary.md

      # Upload format check report even if tests or other checks failed
      - name: Upload fmt report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fmt-report
          path: dist/reports/fmt/fmt_summary.md

      # Upload all test reports, useful for JUnit viewers or release artifacts
      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: dist/tests/*
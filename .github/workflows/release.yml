name: Release

# Trigger the workflow only when a new tag starting with "v" is pushed (e.g., v1.0.0)
on:
  push:
    tags:
      - v*

# Prevent duplicate jobs from running for the same tag
# Cancel the in-progress job if a newer one is pushed
concurrency:
  group: "release-${{ github.head_ref || github.ref }}"
  cancel-in-progress: true

jobs:
  # Job to run the main Rust CI checks (tests, formatting, clippy, etc.)
  run-rust-ci:
    uses: ./.github/workflows/run-ci.yml

  # Job to check documentation lints (e.g., missing doc comments)
  run-doc-lint:
    uses: ./.github/workflows/run-doc.yml

  # Job to validate YAML syntax and structure
  run-yaml-validation:
    uses: ./.github/workflows/run-validate.yml

  # Job to generate license reports using cargo-about
  run-license-report:
    uses: ./.github/workflows/run-license-check.yml

  # Main job to gather reports and upload release artifacts to GitHub
  tag_release_artifacts:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    name: Collect and upload release artifacts
    runs-on: ubuntu-latest
    needs:
      - run-rust-ci
      - run-doc-lint
      - run-yaml-validation
      - run-license-report
    permissions: write-all
    steps:
      # Checkout the source code and its submodules
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      # Download component-specific artifacts generated by earlier jobs

      # Deny-check report (license allowlist violations)
      - name: Download deny report
        uses: actions/download-artifact@v4
        with:
          name: deny-report
          path: dist/reports/deny/

      # Formatting report (rustfmt summary)
      - name: Download fmt report
        uses: actions/download-artifact@v4
        with:
          name: fmt-report
          path: dist/reports/fmt/

      # Test result report (JUnit XML format)
      - name: Download test report
        uses: actions/download-artifact@v4
        with:
          name: test-report
          path: dist/tests/

      # License HTML report from cargo-about
      - name: Download license report
        uses: actions/download-artifact@v4
        with:
          name: license-report
          path: dist/licenses/

      # Code coverage HTML report for the server component
      - name: Download coverage report for server
        uses: actions/download-artifact@v4
        with:
          name: code-coverage-html-server
          path: dist/coverage/server/

      # Code coverage HTML report for the tools component
      - name: Download coverage report for tools
        uses: actions/download-artifact@v4
        with:
          name: code-coverage-html-tools
          path: dist/coverage/tools/

      # Code coverage HTML report for the common component
      - name: Download coverage report for common
        uses: actions/download-artifact@v4
        with:
          name: code-coverage-html-common
          path: dist/coverage/common/

      # Optional: coverage report for the agent component (commented out)
      # - name: Download coverage report for agent
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: code-coverage-html-agent
      #     path: dist/coverage/agent/

      # Optional: coverage report for the player component (commented out)
      # - name: Download coverage report for player
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: code-coverage-html-player
      #     path: dist/coverage/player/

      # Upload reports and documentation as release artifacts

      - name: Upload deny report to release
        uses: svenstaro/upload-release-action@v2
        id: upload_deny_report
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/reports/deny/deny_summary.md
          tag: ${{ github.ref }}

      - name: Upload fmt report to release
        uses: svenstaro/upload-release-action@v2
        id: upload_fmt_report
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/reports/fmt/fmt_summary.md
          tag: ${{ github.ref }}

      - name: Upload test report to release
        uses: svenstaro/upload-release-action@v2
        id: upload_test_report
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/tests/test_summary.xml
          file_glob: true
          tag: ${{ github.ref }}

      - name: Upload license report to release
        uses: svenstaro/upload-release-action@v2
        id: upload_license_report
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/licenses/*.html
          file_glob: true
          tag: ${{ github.ref }}

      - name: Upload test coverage report for server to release
        uses: svenstaro/upload-release-action@v2
        id: upload_test_coverage_report_server
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/coverage/server/*.html
          file_glob: true
          tag: ${{ github.ref }}

      # Optional: upload coverage for player component
      # - name: Upload test coverage report for player to release
      #   uses: svenstaro/upload-release-action@v2
      #   id: upload_test_coverage_report_player
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     file: dist/coverage/player/*.html
      #     file_glob: true
      #     tag: ${{ github.ref }}

      # Optional: upload coverage for agent component
      # - name: Upload test coverage report for agent to release
      #   uses: svenstaro/upload-release-action@v2
      #   id: upload_test_coverage_report_agent
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     file: dist/coverage/agent/*.html
      #     file_glob: true
      #     tag: ${{ github.ref }}

      - name: Upload test coverage report for tools to release
        uses: svenstaro/upload-release-action@v2
        id: upload_test_coverage_report_tools
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/coverage/tools/*.html
          file_glob: true
          tag: ${{ github.ref }}

      - name: Upload test coverage report for common to release
        uses: svenstaro/upload-release-action@v2
        id: upload_test_coverage_report_common
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/coverage/common/*.html
          file_glob: true
          tag: ${{ github.ref }}

      - name: Upload README to release
        uses: svenstaro/upload-release-action@v2
        id: upload_readme
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: README.md
          tag: ${{ github.ref }}

      - name: Upload Coding Guidelines to release
        uses: svenstaro/upload-release-action@v2
        id: upload_coding_guidelines
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: src/coding-rule.md
          tag: ${{ github.ref }}

      - name: Upload Release Process to release
        uses: svenstaro/upload-release-action@v2
        id: upload_release_process
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: .github/workflows/release.yml
          tag: ${{ github.ref }}

      # Archive and upload documentation directory
      - name: Archive doc folder
        shell: bash
        run: |
          tar czf doc-archive.tar.gz doc/

      - name: Upload doc archive to release
        uses: svenstaro/upload-release-action@v2
        id: upload_doc
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: doc-archive.tar.gz
          tag: ${{ github.ref }}

      # Retrieve the latest GitHub Release info (URL)
      - name: Gets latest created release info
        id: latest_release_info
        uses: joutvhu/get-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Run Quevee to generate Eclipse Dash quality manifest
      - name: Collect quality artifacts with quevee
        id: quevee_manifest
        uses: eclipse-dash/quevee@v1
        with:
          release_url: ${{ steps.latest_release_info.outputs.html_url }}
          artifacts_readme: ${{ steps.upload_readme.outputs.browser_download_url }}
          artifacts_coding_guidelines: ${{ steps.upload_coding_guidelines.outputs.browser_download_url }}
          artifacts_release_process: ${{ steps.upload_release_process.outputs.browser_download_url }}
          artifacts_documentation: ${{ steps.upload_doc.outputs.browser_download_url }}
          artifacts_requirements: ${{ steps.upload_doc.outputs.browser_download_url }}
          artifacts_testing: ${{ steps.upload_test_report.outputs.browser_download_url }}, ${{ steps.upload_license_report.outputs.browser_download_url }}, ${{ steps.upload_fmt_report.outputs.browser_download_url }}, ${{ steps.upload_deny_report.outputs.browser_download_url }}, ${{ steps.upload_test_coverage_report_server.outputs.browser_download_url }}, ${{ steps.upload_test_coverage_report_tools.outputs.browser_download_url }}, ${{ steps.upload_test_coverage_report_common.outputs.browser_download_url }}

      # Upload the Quevee manifest to the GitHub Release
      - name: Upload quality manifest to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.quevee_manifest.outputs.manifest_file }}
          tag: ${{ github.ref }}

  # Job to build and push Docker container image (depends on artifact upload job)
  build-and-push-container:
    name: Build and Push Container Image
    uses: ./.github/workflows/build-container.yml
    needs:
      - tag_release_artifacts
    permissions:
      packages: write
